# -*- coding: utf-8 -*-
"""HandsOn9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cR6rCSkTJj_5MDqdHfVbFucSkIEpbEZn
"""

class Node:
  def __init__(self, key, value):
    self.key=key
    self.value=value
    self.prev=None
    self.next=None

class DoublyLinkedList:
  def __init__(self):
    self.head=None
    self.tail=None
  def append(self, key, value):
    new_node=Node(key, value)
    if self.tail is None:
      self.head=self.tail=new_node
    else:
      self.tail.next=new_node
      new_node.prev=self.tail
      self.tail=new_node
  def remove(self, node):
    if node.prev:
      node.prev.next=node.next
    if node.next:
      node.next.prev=node.prev
    if node==self.head:
      self.head=node.next
    if node==self.tail:
      self.tail=node.prev
      node.prev=node.next=None
  def find(self, key):
    current=self.head
    while current:
      if current.key==key:
        return current
      current = current.next
    return None

class HashTable:
  def __init__(self, initial_size=8):
    self.size=initial_size
    self.count=0
    self.buckets=[DoublyLinkedList() for _ in range(self.size)]
  def hash_multiplication(self, key):
    A=(5**0.5-1)/2
    return int(self.size*(key*A%1))
  def hash_division(self, key):
    return key%self.size
  def hash(self, key):
    return self.hash_multiplication(key)
  def put(self, key, value):
    index=self.hash(key)
    bucket=self.buckets[index]
    existing_node=bucket.find(key)
    if existing_node:
      existing_node.value=value
    else:
      bucket.append(key, value)
      self.count+=1
      if self.count/self.size>0.75:
        self.resize(2)
  def get(self, key):
    index=self.hash(key)
    bucket=self.buckets[index]
    node=bucket.find(key)
    return node.value if node else None
  def remove(self, key):
    index=self.hash(key)
    bucket=self.buckets[index]
    node=bucket.find(key)
    if node:
      bucket.remove(node)
      self.count-=1
      if self.count/self.size<0.25:
        self.resize(-1)
  def resize(self, direction):
    if direction==2:
      new_size=self.size*2
    elif direction==-1:
      new_size=max(1,self.size//2)
    else:
      return
    new_buckets=[DoublyLinkedList() for _ in range(new_size)]
    old_buckets=self.buckets
    self.size=new_size
    self.count=0
    self.buckets=new_buckets
    for bucket in old_buckets:
      current=bucket.head
      while current:
        self.put(current.key, current.value)
        current=current.next
  def __str__(self):
    result=[]
    for i, bucket in enumerate(self.buckets):
      current=bucket.head
      bucket_items=[]
      while current:
        bucket_items.append(f"({current.key}: {current.value})")
        current=current.next
      result.append(f"Bucket {i}: " + ", ".join(bucket_items))
    return "\n".join(result)

if __name__ == "__main__":
  ht=HashTable()
  ht.put(1, 10)
  ht.put(2, 20)
  ht.put(3, 30)
  ht.put(4, 40)
  print(ht)
  print("Get key 2:", ht.get(2))
  ht.remove(2)
  print("After removing key 2:")
  print(ht)
  ht.put(5, 50)
  ht.put(6, 60)
  ht.put(7, 70)
  ht.put(8, 80)
  print("After adding more keys:")
  print(ht)